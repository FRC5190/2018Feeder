plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}
apply plugin: 'java'
apply plugin: 'application'

ext.buildType = "windows"
mainClassName = 'frc.team5190.feeder.Feeder'
def projectName = '2018Feeder'

apply from: 'dependencies.gradle'

repositories {
    mavenCentral()
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

dependencies {
    compile ntcoreDep()
    compile cscoreDep()
    compile files('lib/pathfinder.jar')
    compile 'org.opencv:opencv-java:3.1.0'
}

jar {
    baseName = projectName
}

shadowJar {
    baseName = projectName
}

distributions {
    main {
        baseName = projectName
        contents {
            from (openCvUnzipLocation) {
                exclude 'META-INF'
                exclude '**/MANIFEST.MF'
                into 'bin/'
            }
        }
    }
}

def outputDirectory = file("${rootDir}/output")

task writeExecuteScript() {
    dependsOn jar
    doLast {
        if (buildType == "windows") {
            def runFile = new File("${buildDir}/run${projectName}.bat")
            runFile.write "java -Djava.library.path=. -jar ${projectName}-all.jar"
        } else {
            def runFile = new File("${buildDir}/run${projectName}")
            runFile.write "java -Djava.library.path=. -jar ${projectName}-all.jar"
        }
    }
}

task copyToOutput(type: Copy) {
    dependsOn shadowJar
    dependsOn unzipOpenCv
    dependsOn writeExecuteScript
    destinationDir = outputDirectory
    from (file(shadowJar.archivePath)) {
    }
    from (openCvUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
    }
    if (buildType == "windows") {
        from (file("${buildDir}/run${projectName}.bat")) {
        }
    } else {
        from (file("${buildDir}/run${projectName}")) {
        }
    }
}

task zipOutput(type: Zip) {
    baseName = projectName
    duplicatesStrategy = 'exclude'
    dependsOn shadowJar
    dependsOn unzipOpenCv
    destinationDir = outputDirectory
    from (file(shadowJar.archivePath)) {
    }
    from (openCvUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
    }
    if (buildType == "windows") {
        from (file("${buildDir}/run${projectName}.bat")) {
        }
    } else {
        from (file("${buildDir}/run${projectName}")) {
            fileMode 0777
        }
    }
}

distZip.dependsOn unzipOpenCv
distTar.dependsOn unzipOpenCv

applicationDefaultJvmArgs = ["-Djava.library.path=${openCvUnzipLocation}"]

build.dependsOn copyToOutput
build.dependsOn zipOutput
run.dependsOn unzipOpenCv

clean {
    delete outputDirectory
}
